{"version":3,"sources":["hooks/usePosition.js","constants/api.js","hooks/useWeather.js","constants/apiKey.js","constants/color.js","helpers/getBackgroundColor.js","screens/Weather.js","App.js","index.js"],"names":["usePosition","useState","position","setPosition","geoError","setGeoError","onChange","coords","lat","latitude","lon","longitude","onError","error","message","useEffect","watcher","geo","navigator","geolocation","a","watchPosition","clearWatch","BASIC_API","BASIC_WEATHER_API","BASIC_ICON_API","useWeather","weatherData","setWeatherData","weatherError","setWeatherError","getWeatherData","config","params","appid","units","axios","get","weather","data","iconcode","icon","temperature","main","temp","console","lowTempColor","mediumTempColor","highTempColor","getBackgroundColor","percent","parseFloat","Math","round","WeatherContainer","styled","div","SliderContainer","Weather","initialTemperature","setTemperature","src","alt","value","size","min","max","target","Number","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d152752c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst usePosition = () => {\n  const [position, setPosition] = useState({});\n  const [geoError, setGeoError] = useState(null);\n\n  const onChange = ({ coords }) => {\n    setPosition({\n      lat: coords.latitude,\n      lon: coords.longitude,\n    });\n  };\n  const onError = (error) => {\n    setGeoError(error.message);\n  };\n\n  useEffect(() => {\n    const geo = navigator.geolocation;\n    let watcher;\n\n    if (!geo) {\n      setGeoError(\"Geolocation is not supported\");\n      return;\n    }\n\n    const watchPosition = async () => {\n      watcher = await geo.watchPosition(onChange, onError);\n    };\n    watchPosition();\n\n    return () => geo.clearWatch(watcher);\n  }, []);\n\n  return { position, geoError };\n};\n\nexport default usePosition;\n","const BASIC_API = 'openweathermap.org'\n\nexport const BASIC_WEATHER_API = `http://api.${BASIC_API}`;\nexport const BASIC_ICON_API = `http://${BASIC_API}`;","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { API_KEY } from \"../constants/apiKey\";\nimport { BASIC_WEATHER_API } from \"../constants/api\";\n\nconst useWeather = ({ position, geoError }) => {\n  const [weatherData, setWeatherData] = useState({});\n  const [weatherError, setWeatherError] = useState(null);\n\n  // NOTE: I had to switch from www.metaweather.com to https://openweathermap.org since the former provides weather data for city name rather than geolocation.\n  // Commented request receives data for a number of cities in the vicinity of provided location but not for the location provided.\n  // const config = {\n  //   params: {\n  //     query: `${latitude},${longitude}`\n  //   }\n  // }\n  // const response = await axios.get('https://cors-anywhere.herokuapp.com/http://www.metaweather.com/api/location/search/', config)\n\n  useEffect(() => {\n    const getWeatherData = async ({ lat, lon }) => {\n      try {\n        const config = {\n          params: {\n            lat,\n            lon,\n            appid: API_KEY,\n            units: \"metric\",\n          },\n        };\n\n        const { data: weather } = await axios.get(\n          `https://cors-anywhere.herokuapp.com/${BASIC_WEATHER_API}/data/2.5/weather`,\n          config\n        );\n        const iconcode = weather?.weather[0]?.icon;\n        setWeatherData({ temperature: weather?.main?.temp, iconcode });\n      } catch (e) {\n        console.error(e);\n        setWeatherError(\"Getting weather data failed\");\n      }\n    };\n\n    if (!geoError && position?.lon && position?.lat) {\n      getWeatherData(position);\n    }\n  }, [geoError, position]);\n\n  return { ...weatherData, weatherError };\n};\n\nexport default useWeather;\n","export const API_KEY = '087413f6edab51d45d3d73d594ea6431'\n","export const lowTempColor = \"0,255,255\";\nexport const mediumTempColor = \"255,247,0\";\nexport const highTempColor = \"255,140,0\";\n","import {\n  lowTempColor,\n  mediumTempColor,\n  highTempColor,\n} from \"../constants/color\";\n\nconst getBackgroundColor = (temperature) => {\n  if (typeof temperature === \"number\") {\n    if (temperature <= -10) {\n      return `rgb(${lowTempColor})`;\n    }\n    if (temperature === 10) {\n      return `rgb(${mediumTempColor})`;\n    }\n    if (temperature >= 30) {\n      return `rgb(${highTempColor})`;\n    }\n    if (temperature > -10 && temperature < 10) {\n      const percent = parseFloat(Math.round((temperature + 10) * 5)) / 100.0;\n      return `linear-gradient(rgba(${mediumTempColor}, ${percent}), rgba(${mediumTempColor}, ${percent})), linear-gradient(rgb(${lowTempColor}), rgb(${lowTempColor}))`;\n    }\n\n    if (temperature > 10 && temperature < 30) {\n      const percent = parseFloat(Math.round((temperature - 10) * 5)) / 100.0;\n      return `linear-gradient(rgba(${highTempColor}, ${percent}), rgba(${highTempColor}, ${percent})), linear-gradient(rgb(${mediumTempColor}), rgb(${mediumTempColor}))`;\n    }\n  }\n  return \"none\";\n};\n\nexport default getBackgroundColor;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport RangeSlider from \"react-bootstrap-range-slider\";\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\nimport { BASIC_ICON_API } from \"../constants/api\";\nimport getBackgroundColor from \"../helpers/getBackgroundColor\";\n\nconst WeatherContainer = styled.div`\n  position: relative;\n  background: ${({ temperature }) => getBackgroundColor(temperature)};\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SliderContainer = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 30px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Weather = ({\n  geoError,\n  temperature: initialTemperature,\n  weatherError,\n  iconcode,\n}) => {\n  const [temperature, setTemperature] = useState(initialTemperature || 0);\n\n  return (\n    <WeatherContainer {...{ temperature }}>\n      {!!geoError ? <div>{geoError}</div> : null}\n      {!!weatherError ? (\n        <div>{weatherError}</div>\n      ) : (\n        <img\n          src={`${BASIC_ICON_API}/img/wn/${iconcode}@2x.png`}\n          alt=\"alternative text\"\n        />\n      )}\n      <SliderContainer>\n        <RangeSlider\n          {...{\n            value: temperature,\n            size: \"lg\",\n            min: -50,\n            max: 50,\n            onChange: ({ target }) => {\n              setTemperature(Number(target.value));\n            },\n          }}\n        />\n      </SliderContainer>\n    </WeatherContainer>\n  );\n};\n\nexport default Weather;\n","import React from \"react\";\nimport usePosition from \"./hooks/usePosition\";\nimport useWeather from \"./hooks/useWeather\";\nimport Weather from \"./screens/Weather\";\n\nconst App = () => {\n  const { position, geoError } = usePosition();\n\n  const { temperature, weatherError, iconcode } = useWeather({\n    position,\n    geoError,\n  });\n\n  return <Weather {...{ temperature, weatherError, iconcode, geoError }} />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}